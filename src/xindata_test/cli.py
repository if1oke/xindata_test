import json

import rich
import rich.table
import typer

from xindata_test.llm_engine import answer_from_result, prompt_to_sql
from xindata_test.query_executor import execute_query

app = typer.Typer()


@app.command()
def ask(
    question: str = typer.Argument(..., help="–í–æ–ø—Ä–æ—Å"),
    format: str = typer.Option("table", help="–í—ã–≤–æ–¥–∞: table | json | md"),
    debug: bool = typer.Option(False, help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL"),
) -> None:
    """
    –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ–± –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤. –ü—Ä–∏–º–µ—Ä:
    python -m freelance_qa "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏–ª < 100 –ø—Ä–æ–µ–∫—Ç–æ–≤?"
    
    param: question: –≤–æ–ø—Ä–æ—Å
    param: format: —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    param: debug: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    typer.echo("üîé –§–æ—Ä–º—É–ª–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å...")
    sql = prompt_to_sql(question)

    if debug:
        typer.echo("\n[debug] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:")
        rich.print(f"[bold yellow]{sql}[/bold yellow]\n")

    try:
        df = execute_query(sql)
    except Exception as e:
        rich.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:[/bold red] {e}")
        raise typer.Exit(1)

    result = df.to_dict(orient="records")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if format == "json":
        print(json.dumps(result, indent=2, ensure_ascii=False))
    elif format == "md":
        print(df.to_markdown(index=False))
    else:
        table = rich.table.Table(show_header=True, header_style="bold cyan")
        for col in df.columns:
            table.add_column(col)
        for row in df.itertuples(index=False):
            table.add_row(*map(str, row))
        rich.print(table)

    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ
    answer = answer_from_result(question, result, sql)
    typer.echo(f"\nüí° –û—Ç–≤–µ—Ç:\n{answer}")


def main():
    app()


if __name__ == "__main__":
    main()
